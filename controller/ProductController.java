package ra.dev.controller;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.data.domain.Page;import org.springframework.data.domain.PageRequest;import org.springframework.data.domain.Pageable;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.security.access.prepost.PreAuthorize;import org.springframework.web.bind.annotation.*;import ra.dev.model.dto.request.product.ProductDetail;import ra.dev.model.dto.request.product.ProductGet;import ra.dev.model.dto.request.product.ViewByCatalog;import ra.dev.model.entity.Catalog;import ra.dev.model.entity.Product;import ra.dev.model.entity.SubImage;import ra.dev.model.service.CatalogService;import ra.dev.model.service.FileStorageService;import ra.dev.model.service.ProductService;import ra.dev.model.service.SubImageService;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;@CrossOrigin(origins = "http://localhost:8080")@RestController@RequestMapping("api/v1/product")public class ProductController {    @Autowired    private ProductService productService;    @Autowired    private SubImageService subImageService;    @Autowired    private CatalogService catalogService;    @Autowired    private FileStorageService fileStorageService;    //***************  Controler admin  ***************    //Get ALL Product    @GetMapping("/ad")    @PreAuthorize("hasRole('MODERATOR') or hasRole('ADMIN')")//    @PreAuthorize("hasRole('ADMIN')")    public List<ProductGet> productList() {        List<Product> productList = productService.findAll();        List<ProductGet> productDTO = new ArrayList<>();        for (Product pro : productList) {            ProductGet productDTOs = new ProductGet(                    pro.getProductID(),                    pro.getCatalog().getCatalogName(),                    pro.getProductName(),                    pro.getDiscount(),                    pro.getPrice(),                    pro.isProductStatus(),                    pro.getProductImg());            productDTO.add(productDTOs);        }        return productDTO;    }    // Product detail    @GetMapping("/ad/{productID}")    @PreAuthorize("hasRole('MODERATOR') or hasRole('ADMIN')")    public ResponseEntity<?> productDetail(@PathVariable("productID") int productID) {        Product product = productService.findByID(productID);        ProductDetail productDetail = new ProductDetail(                product.getProductID(),                product.getCatalog().getCatalogName(),                product.getProductName(),                product.getDiscount(),                product.getPrice(),                product.getProductImg(),                product.getDescription(),                product.isProductStatus(),                product.getListSub()        );        return ResponseEntity.ok(productDetail);    }    //Update product    @PostMapping("/delete/{productID}")    @PreAuthorize("hasRole('MODERATOR') or hasRole('ADMIN')")    public Product delete(@PathVariable("produtcID") int productID) {        Product product = productService.findByID(productID);        product.setProductStatus(false);        return productService.saveOrUpdate(product);    }    @PostMapping    @PreAuthorize("hasRole('MODERATOR') or hasRole('ADMIN')")    public Product creatProduct(@RequestBody Product product) {        Product p = productService.saveOrUpdate(product);        for (int i = 0; i < product.getListSub().size(); i++) {            SubImage subImage = new SubImage();            subImage.setSubLink(String.valueOf(product.getListSub().get(i)));            subImage.setProduct(product);            subImageService.saveOrUpdate(subImage);        }        return p;    }    @PutMapping("/ad/{productID}")    @PreAuthorize("hasRole('MODERATOR') or hasRole('ADMIN')")    public Product updateProdutc(@PathVariable("productID") int productID, @RequestBody Product product) {        Product productUpdtae = productService.findByID(productID);        productUpdtae.setCatalog(product.getCatalog());        productUpdtae.setProductName(product.getProductName());        productUpdtae.setDiscount(product.getDiscount());        productUpdtae.setDescription(product.getDescription());        productUpdtae.setProductStatus(product.isProductStatus());        productUpdtae.setProductImg(product.getProductImg());        for (SubImage sub : product.getListSub()) {            SubImage subImage = subImageService.findByID(sub.getSubID());            subImage.setSubLink(sub.getSubLink());            subImage.setProduct(productUpdtae);            subImageService.saveOrUpdate(subImage);        }        return productService.saveOrUpdate(productUpdtae);    }//***************  Controler User  ***************    @GetMapping("/viewByCatalog")    public List<ViewByCatalog> viewCatalog() {        List<Catalog> catalogList = catalogService.findAll();        List<ViewByCatalog> viewByCatalog = new ArrayList<>();        for (Catalog cata : catalogList) {            List<ProductGet> productDTOS = new ArrayList<>();            for (Product pro : cata.getProductList()) {                ProductGet productDTO = new ProductGet(pro.getProductID(),                        pro.getCatalog().getCatalogName(),                        pro.getProductName(),                        pro.getDiscount(),                        pro.getPrice(),                        pro.isProductStatus(),                        pro.getProductImg());                productDTOS.add(productDTO);            }            ViewByCatalog catalogDTO1 = new ViewByCatalog(cata.getCatalogName(), productDTOS);            viewByCatalog.add(catalogDTO1);        }        return viewByCatalog;    }    @GetMapping("/sortByNameAndPrice")    public ResponseEntity<List<Product>> sortBookByNameAndPrice(@RequestParam("directionName") String directionName,                                                                @RequestParam("directionPrice") String directionPrice) {        List<Product> productList = productService.sortByNameAndPrice(directionName, directionPrice);        return new ResponseEntity<>(productList, HttpStatus.OK);    }    @GetMapping("/getPagging")    public ResponseEntity<Map<String, Object>> getPagging(            @RequestParam(defaultValue = "0") int page,            @RequestParam(defaultValue = "3") int size) {        Pageable pageable = PageRequest.of(page, size);        Page<Product> pageBook = productService.getPagging(pageable);        Map<String, Object> data = new HashMap<>();        data.put("product", pageBook.getContent());        data.put("total", pageBook.getSize());        data.put("totalItems", pageBook.getTotalElements());        data.put("totalPages", pageBook.getTotalPages());        return new ResponseEntity<>(data, HttpStatus.OK);    }}