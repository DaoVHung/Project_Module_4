package ra.dev.controller;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.security.access.prepost.PreAuthorize;import org.springframework.security.core.context.SecurityContextHolder;import org.springframework.web.bind.annotation.*;import ra.dev.model.dto.request.star.ProductHistory;import ra.dev.model.dto.request.star.SentRate;import ra.dev.model.entity.*;import ra.dev.model.service.OrderService;import ra.dev.model.service.ProductService;import ra.dev.model.service.StarService;import ra.dev.model.service.UserService;import ra.dev.security.CustomUserDetails;import java.util.ArrayList;import java.util.List;@CrossOrigin(origins = "http://localhost:8080")@RestController@RequestMapping("api/v1/star")public class StarController {    @Autowired    private StarService starService;    @Autowired    private UserService userService;    @Autowired    private OrderService orderService;    @Autowired    private ProductService productService;    //   ************* User ************  //    @GetMapping("/getOrderHistory")    @PreAuthorize("hasRole('USER')")    public List<ProductHistory> getHistory() {        CustomUserDetails userDetails = (CustomUserDetails) SecurityContextHolder.getContext().getAuthentication().getPrincipal();        List<Order> list = starService.findByUserID(userDetails.getUserId());        System.out.println(list);        List<ProductHistory> productHistories = new ArrayList<>();        for (Order order : list) {            for (OrderDetail detail : order.getListOrderDetail()) {                ProductHistory getDetail = new ProductHistory();                Star star = starService.findByIDProduct(detail.getProductID().getProductID());                if (star != null) {                    if (order.getOrderID() != star.getOrder().getOrderID()) {                        getDetail.setProductName(detail.getProductID().getProductName());                        getDetail.setProductID(detail.getProductID().getProductID());                        getDetail.setOrderID(order.getOrderID());                        productHistories.add(getDetail);                    }                } else {                    getDetail.setProductName(detail.getProductID().getProductName());                    getDetail.setProductID(detail.getProductID().getProductID());                    getDetail.setOrderID(order.getOrderID());                    productHistories.add(getDetail);                }            }        }        return productHistories;    }    @PostMapping("/sendRate")    @PreAuthorize("hasRole('USER')")    public Star sendRate(@RequestBody SentRate sentRate) {        CustomUserDetails userDetails = (CustomUserDetails) SecurityContextHolder.getContext().getAuthentication().getPrincipal();        Users users = userService.findByID(userDetails.getUserId());        Product product = productService.findByID(sentRate.getProductId());        Star star = new Star();        star.setFullName(users.getFullName());        star.setNumberStar(sentRate.getNumberStar());        star.setProductName(product.getProductName());        star.setStarStatus(false);        star.setOrder(orderService.findByID(sentRate.getOrderId()));        star.setProductID(product.getProductID());        star.setUserID(users);        return starService.saveOrUpdate(star);    }    @PutMapping("/confirmRate/{starID}")    public ResponseEntity<?> confirmRate(@PathVariable("starID") int starID) {        Star star = starService.findByID(starID);        star.setStarStatus(true);        starService.saveOrUpdate(star);        return ResponseEntity.status(HttpStatus.OK).body(" Confirm success !");    }    @GetMapping("/listStar")    public List<Star> starList() {        List<Star> list = starService.listStar();        return list;    }}