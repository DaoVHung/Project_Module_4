package ra.dev.controller;import org.apache.catalina.User;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.ResponseEntity;import org.springframework.security.access.prepost.PreAuthorize;import org.springframework.security.authentication.AuthenticationManager;import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;import org.springframework.security.core.Authentication;import org.springframework.security.core.context.SecurityContextHolder;import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;import org.springframework.security.crypto.password.PasswordEncoder;import org.springframework.web.bind.annotation.*;import ra.dev.jwt.JwtTokenProvider;import ra.dev.model.dto.request.cart.UpdateCart;import ra.dev.model.dto.request.user.ChangePass;import ra.dev.model.dto.request.user.UserList;import ra.dev.model.dto.request.user.UserUpdate;import ra.dev.model.entity.ERole;import ra.dev.model.entity.Product;import ra.dev.model.entity.Roles;import ra.dev.model.entity.Users;import ra.dev.model.service.RoleService;import ra.dev.model.service.UserService;import ra.dev.payload.request.LoginRequest;import ra.dev.payload.request.SignupRequest;import ra.dev.payload.response.JwtResponse;import ra.dev.payload.response.MessageResponse;import ra.dev.security.CustomUserDetails;import ra.dev.security.CustomUserDetailsService;import ra.dev.sendMail.ProvideSendEmail;import java.util.ArrayList;import java.util.HashSet;import java.util.List;import java.util.Set;import java.util.stream.Collectors;@CrossOrigin(origins = "*")@RestController@RequestMapping("api/v1")public class Admincontroller {    @Autowired    private UserService userService;    @Autowired    private AuthenticationManager authenticationManager;    @Autowired    private JwtTokenProvider tokenProvider;    @Autowired    private RoleService roleService;    @Autowired    private PasswordEncoder encoder;    @Autowired    private CustomUserDetailsService customUserDetailsService;    @Autowired    private ProvideSendEmail provideSendEmail;    @PutMapping("/changePass")    @PreAuthorize("hasRole('ADMIN')")    public ResponseEntity<?> changePassword(@RequestBody ChangePass changePass) {        CustomUserDetails userDetails = (CustomUserDetails) SecurityContextHolder.getContext().getAuthentication().getPrincipal();        Users users = userService.findByID(userDetails.getUserId());        BCryptPasswordEncoder bc = new BCryptPasswordEncoder();        boolean passChecker = bc.matches(changePass.getOldPassword(), users.getPassword());        if (passChecker) {            boolean checkDuplicate = bc.matches(changePass.getPassword(), users.getPassword());            if (checkDuplicate) {                return ResponseEntity.ok(new MessageResponse("The new password must be different from the old password !"));            } else {                users.setPassword(encoder.encode(changePass.getPassword()));                userService.saveOrUpdate(users);                return ResponseEntity.ok(new MessageResponse("Change password successfully !"));            }        } else {            return ResponseEntity.ok(new MessageResponse("Password does not match ! Change password fail"));        }    }}